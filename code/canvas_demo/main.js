"use strict";
/*
    Here is the first demo for generating a video using canvas, given a simple transcript generated by gentle.
    See input_mappings folder to see what the transcripts look like
    
    The parameters to configure the output are located in inputs.json
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var canvas_1 = require("canvas");
var fs_1 = __importDefault(require("fs"));
var process_1 = require("process");
var get_video_duration_1 = require("get-video-duration");
var fluent_ffmpeg_1 = __importDefault(require("fluent-ffmpeg"));
var ffmpeg_static_1 = __importDefault(require("ffmpeg-static"));
fluent_ffmpeg_1.default.setFfmpegPath(ffmpeg_static_1.default);
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var WIDTH, HEIGHT, TRANSCRIPT_PATH, PHONEME_MAPPINGS_PATH, MOUTH_TEXTURES_PATH, AUDIO_PATH, FRAME_RATE, PHONEME_OCCURRENCE_CONVOLUTION, video_length, num_frames, transcript, mouths, phoneme_occurrences, parameters, filterSum, e_1, mouth_mappings_file, _a, _b, _i, phoneme, _c, _d, _e, e_2, e_3, canvas, ctx, current_word_idx, current_phoneme_idx, current_phoneme_offset, num_words, frame, active_word, active_phoneme, current_time, num_phonemes, _loop_1, frame;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    mouths = new Map();
                    phoneme_occurrences = new Map();
                    _f.label = 1;
                case 1:
                    _f.trys.push([1, 13, , 14]);
                    parameters = JSON.parse(fs_1.default.readFileSync('./inputs.json').toString());
                    WIDTH = parameters.width;
                    HEIGHT = parameters.height;
                    TRANSCRIPT_PATH = parameters.input_transcript;
                    PHONEME_MAPPINGS_PATH = parameters.input_mouth_mappings;
                    MOUTH_TEXTURES_PATH = parameters.input_mouth_mappings_textures;
                    AUDIO_PATH = parameters.input_audio;
                    FRAME_RATE = parameters.output_frame_rate;
                    PHONEME_OCCURRENCE_CONVOLUTION = parameters.phoneme_occurrence_convolution_filter;
                    if (!(WIDTH && HEIGHT && TRANSCRIPT_PATH && PHONEME_MAPPINGS_PATH && MOUTH_TEXTURES_PATH && AUDIO_PATH && FRAME_RATE && PHONEME_OCCURRENCE_CONVOLUTION)) {
                        throw new Error("missing parameters in inputs.json?");
                    }
                    // verifying this filter is correct
                    try {
                        if (PHONEME_OCCURRENCE_CONVOLUTION.length % 2 == 0) {
                            throw new Error("phoneme_occurrence_convolution_filter length of " + PHONEME_OCCURRENCE_CONVOLUTION.length + " must be an odd number");
                        }
                        filterSum = PHONEME_OCCURRENCE_CONVOLUTION.reduce(function (a, b) { return a + b; }, 0);
                        if (Math.abs(filterSum - 1) > 0.1) {
                            throw new Error("phoneme_occurrence_convolution_filter must sum to 1, not " + filterSum);
                        }
                    }
                    catch (e) {
                        throw new Error("invalid phoneme_occurrence_convolution_filter: " + e.message);
                    }
                    _f.label = 2;
                case 2:
                    _f.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, get_video_duration_1.getVideoDurationInSeconds(AUDIO_PATH)];
                case 3:
                    video_length = _f.sent();
                    return [3 /*break*/, 5];
                case 4:
                    e_1 = _f.sent();
                    throw new Error("couldn't extract video length from " + AUDIO_PATH + ": " + e_1.message);
                case 5:
                    num_frames = FRAME_RATE * video_length;
                    try {
                        transcript = JSON.parse(fs_1.default.readFileSync(TRANSCRIPT_PATH).toString());
                    }
                    catch (e) {
                        throw new Error("couldn't parse the transcript located at " + TRANSCRIPT_PATH + ": " + e.message);
                    }
                    _f.label = 6;
                case 6:
                    _f.trys.push([6, 11, , 12]);
                    mouth_mappings_file = JSON.parse(fs_1.default.readFileSync(PHONEME_MAPPINGS_PATH).toString());
                    _a = [];
                    for (_b in mouth_mappings_file)
                        _a.push(_b);
                    _i = 0;
                    _f.label = 7;
                case 7:
                    if (!(_i < _a.length)) return [3 /*break*/, 10];
                    phoneme = _a[_i];
                    _d = (_c = mouths).set;
                    _e = [phoneme];
                    return [4 /*yield*/, canvas_1.loadImage(MOUTH_TEXTURES_PATH + "/" + mouth_mappings_file[phoneme])];
                case 8:
                    _d.apply(_c, _e.concat([_f.sent()]));
                    phoneme_occurrences.set(phoneme, new Array(Math.floor(num_frames)).fill(0));
                    _f.label = 9;
                case 9:
                    _i++;
                    return [3 /*break*/, 7];
                case 10:
                    if (!mouths.get('idle')) {
                        throw new Error("you are missing an \"idle\" entry in " + PHONEME_MAPPINGS_PATH + " that represents the mouth's non-speaking texture");
                    }
                    return [3 /*break*/, 12];
                case 11:
                    e_2 = _f.sent();
                    throw new Error("couldn't parse the phoneme-to-mouth mappings located at " + PHONEME_MAPPINGS_PATH + ": " + e_2.message);
                case 12: return [3 /*break*/, 14];
                case 13:
                    e_3 = _f.sent();
                    console.error('error obtaining input parameters: ' + e_3.message);
                    process_1.exit();
                    return [3 /*break*/, 14];
                case 14:
                    canvas = canvas_1.createCanvas(WIDTH, HEIGHT);
                    ctx = canvas.getContext('2d');
                    // delete the old frames (if they exist) from the last run of this program
                    fs_1.default.readdirSync('out_frames/').forEach(function (f) { return fs_1.default.rmSync("out_frames/" + f); }); //node version 14 and above required for this line
                    current_word_idx = 0;
                    current_phoneme_idx = 0;
                    current_phoneme_offset = 0;
                    num_words = transcript.words.length;
                    for (frame = 0; frame < num_frames; frame += 1) {
                        active_word = '';
                        active_phoneme = 'idle';
                        current_time = frame / FRAME_RATE;
                        if (current_word_idx < num_words && current_time > transcript.words[current_word_idx].end) {
                            current_word_idx += 1;
                            current_phoneme_idx = 0;
                            current_phoneme_offset = 0;
                        }
                        if (current_word_idx < num_words
                            && current_time >= transcript.words[current_word_idx].start
                            && current_time < transcript.words[current_word_idx].end) {
                            active_word = transcript.words[current_word_idx].word;
                            num_phonemes = transcript.words[current_word_idx].phones.length;
                            if (current_phoneme_idx < num_phonemes && current_time >= transcript.words[current_word_idx].phones[current_phoneme_idx].duration + current_phoneme_offset) {
                                current_phoneme_offset += transcript.words[current_word_idx].phones[current_phoneme_idx].duration;
                                current_phoneme_idx += 1;
                            }
                            if (current_phoneme_idx < num_phonemes) {
                                active_phoneme = transcript.words[current_word_idx].phones[current_phoneme_idx].phone;
                                // remove the unnecessary underscore and postfix at the end of the phoneme
                                active_phoneme = active_phoneme.split('_')[0];
                            }
                        }
                        (phoneme_occurrences.get(active_phoneme))[frame] = 1;
                    }
                    // perform a low-pass filter operation on each occurrence array to smooth it out
                    phoneme_occurrences.forEach(function (arr, phoneme, _) {
                        var filterLen = PHONEME_OCCURRENCE_CONVOLUTION.length;
                        var copyArr = new Array(arr.length);
                        for (var i = 0; i < arr.length; i += 1) {
                            var localSum = 0;
                            for (var j = -(filterLen - 1) / 2; j < filterLen / 2; j += 1) {
                                var di = i + j;
                                localSum += di < 0 || di >= arr.length ? 0 : PHONEME_OCCURRENCE_CONVOLUTION[j + Math.floor(filterLen / 2)] * arr[di];
                            }
                            copyArr[i] = localSum;
                        }
                        for (var i = 0; i < arr.length; i += 1) {
                            arr[i] = copyArr[i];
                        }
                    });
                    _loop_1 = function (frame) {
                        // get the current phoneme (the one with the maximum value in it's occurrence array at index frame)
                        var active_phoneme = '';
                        var globalMax = -1e10;
                        phoneme_occurrences.forEach(function (arr, phoneme, _) {
                            if (phoneme == 'idle') {
                                return;
                            }
                            if (arr[frame] > globalMax) {
                                active_phoneme = phoneme;
                                globalMax = arr[frame];
                            }
                        });
                        if (globalMax < 0.1) {
                            active_phoneme = 'idle';
                        }
                        // fill background
                        ctx.fillStyle = '#FFFFFF';
                        ctx.fillRect(0, 0, WIDTH, HEIGHT);
                        // ctx.font = '40px Arial'
                        // ctx.fillStyle = '#000000'
                        // ctx.fillText(active_word, 5, 30)
                        ctx.font = '30px Arial';
                        ctx.fillStyle = '#555555';
                        ctx.fillText(active_phoneme, 20, 40);
                        // display phoneme occurrence levels
                        var count = 0;
                        phoneme_occurrences.forEach(function (arr, phoneme) {
                            if (count > 30) {
                                return;
                            }
                            ctx.font = '12px Arial';
                            ctx.fillStyle = '#555555';
                            ctx.fillText(phoneme, 10, 90 + count * 13);
                            ctx.fillRect(40, 94 + (count - 1) * 13, arr[frame] * 30, 8);
                            count += 1;
                        });
                        ctx.font = '15px Arial';
                        ctx.fillStyle = '#555555';
                        ctx.fillText("frame " + frame + "/" + num_frames + " @ " + FRAME_RATE + "fps", 5, HEIGHT - 15);
                        // if there's a phoneme, embed it into the image
                        var mouth = active_phoneme != '' ? mouths.get(active_phoneme) : mouths.get('idle');
                        var mouthOpenAmount = active_phoneme != '' ? phoneme_occurrences.get(active_phoneme)[frame] : 1;
                        var lerp = function (x, y, a) { return x * (1 - a) + y * a; };
                        var stretchAmount = lerp(0.7, 1.2, mouthOpenAmount);
                        ctx.drawImage(mouth, WIDTH / 2, HEIGHT / 2, mouth.width, mouth.height * lerp(0.5, 1, mouthOpenAmount));
                        fs_1.default.writeFileSync("out_frames/frame_" + frame.toString().padStart(9, '0') + ".png", canvas.toBuffer('image/png'));
                    };
                    // draw the frames
                    for (frame = 0; frame < num_frames; frame += 1) {
                        _loop_1(frame);
                    }
                    fluent_ffmpeg_1.default()
                        .input('./out_frames/frame_%9d.png')
                        .inputOptions([
                        // Set input frame rate
                        "-framerate " + FRAME_RATE,
                    ])
                        .output('./out.mp4')
                        .run();
                    return [2 /*return*/];
            }
        });
    });
}
main();
